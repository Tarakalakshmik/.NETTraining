'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class practiceEntities
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=practiceEntities")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property Categories() As DbSet(Of Category)
    Public Overridable Property CustomerDemographics() As DbSet(Of CustomerDemographic)
    Public Overridable Property Customers() As DbSet(Of Customer)
    Public Overridable Property depts() As DbSet(Of dept)
    Public Overridable Property emps() As DbSet(Of emp)
    Public Overridable Property Employees() As DbSet(Of Employee)
    Public Overridable Property Order_Details() As DbSet(Of Order_Detail)
    Public Overridable Property Orders() As DbSet(Of Order)
    Public Overridable Property products() As DbSet(Of product)
    Public Overridable Property Products1() As DbSet(Of Product1)
    Public Overridable Property Regions() As DbSet(Of Region)
    Public Overridable Property sales() As DbSet(Of sale)
    Public Overridable Property Shippers() As DbSet(Of Shipper)
    Public Overridable Property Suppliers() As DbSet(Of Supplier)
    Public Overridable Property Territories() As DbSet(Of Territory)
    Public Overridable Property empdatas() As DbSet(Of empdata)
    Public Overridable Property Utable1() As DbSet(Of Utable1)
    Public Overridable Property Utable2() As DbSet(Of Utable2)

    <DbFunction("practiceEntities", "fn_getcustomer_by_country")>
    Public Overridable Function fn_getcustomer_by_country(ecountry_name As String) As IQueryable(Of fn_getcustomer_by_country_Result)
        Dim ecountry_nameParameter As ObjectParameter = If(ecountry_name IsNot Nothing, New ObjectParameter("ecountry_name", ecountry_name), New ObjectParameter("ecountry_name", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_getcustomer_by_country_Result)("[practiceEntities].[fn_getcustomer_by_country](@ecountry_name)", ecountry_nameParameter)
    End Function

    <DbFunction("practiceEntities", "fn_getemployee_by_job")>
    Public Overridable Function fn_getemployee_by_job(ejob As String) As IQueryable(Of fn_getemployee_by_job_Result)
        Dim ejobParameter As ObjectParameter = If(ejob IsNot Nothing, New ObjectParameter("ejob", ejob), New ObjectParameter("ejob", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_getemployee_by_job_Result)("[practiceEntities].[fn_getemployee_by_job](@ejob)", ejobParameter)
    End Function

    <DbFunction("practiceEntities", "fn_getemployeedata")>
    Public Overridable Function fn_getemployeedata(dept As Nullable(Of Integer)) As IQueryable(Of fn_getemployeedata_Result)
        Dim deptParameter As ObjectParameter = If(dept.HasValue, New ObjectParameter("dept", dept), New ObjectParameter("dept", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_getemployeedata_Result)("[practiceEntities].[fn_getemployeedata](@dept)", deptParameter)
    End Function

    Public Overridable Function CustOrderHist(customerID As String) As ObjectResult(Of CustOrderHist_Result)
        Dim customerIDParameter As ObjectParameter = If(customerID IsNot Nothing, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustOrderHist_Result)("CustOrderHist", customerIDParameter)
    End Function

    Public Overridable Function CustOrdersDetail(orderID As Nullable(Of Integer)) As ObjectResult(Of CustOrdersDetail_Result)
        Dim orderIDParameter As ObjectParameter = If(orderID.HasValue, New ObjectParameter("OrderID", orderID), New ObjectParameter("OrderID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustOrdersDetail_Result)("CustOrdersDetail", orderIDParameter)
    End Function

    Public Overridable Function CustOrdersOrders(customerID As String) As ObjectResult(Of CustOrdersOrders_Result)
        Dim customerIDParameter As ObjectParameter = If(customerID IsNot Nothing, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustOrdersOrders_Result)("CustOrdersOrders", customerIDParameter)
    End Function

    Public Overridable Function empdetails(ename As String, mgrname As ObjectParameter, salary As ObjectParameter) As Integer
        Dim enameParameter As ObjectParameter = If(ename IsNot Nothing, New ObjectParameter("ename", ename), New ObjectParameter("ename", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("empdetails", enameParameter, mgrname, salary)
    End Function

    Public Overridable Function Employee_Sales_by_Country(beginning_Date As Nullable(Of Date), ending_Date As Nullable(Of Date)) As ObjectResult(Of Employee_Sales_by_Country_Result)
        Dim beginning_DateParameter As ObjectParameter = If(beginning_Date.HasValue, New ObjectParameter("Beginning_Date", beginning_Date), New ObjectParameter("Beginning_Date", GetType(Date)))

        Dim ending_DateParameter As ObjectParameter = If(ending_Date.HasValue, New ObjectParameter("Ending_Date", ending_Date), New ObjectParameter("Ending_Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Employee_Sales_by_Country_Result)("Employee_Sales_by_Country", beginning_DateParameter, ending_DateParameter)
    End Function

    Public Overridable Function prdocuts_sales(prd As Nullable(Of Integer), no_qty As Nullable(Of Integer)) As Integer
        Dim prdParameter As ObjectParameter = If(prd.HasValue, New ObjectParameter("prd", prd), New ObjectParameter("prd", GetType(Integer)))

        Dim no_qtyParameter As ObjectParameter = If(no_qty.HasValue, New ObjectParameter("no_qty", no_qty), New ObjectParameter("no_qty", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("prdocuts_sales", prdParameter, no_qtyParameter)
    End Function

    Public Overridable Function Sales_by_Year(beginning_Date As Nullable(Of Date), ending_Date As Nullable(Of Date)) As ObjectResult(Of Sales_by_Year_Result)
        Dim beginning_DateParameter As ObjectParameter = If(beginning_Date.HasValue, New ObjectParameter("Beginning_Date", beginning_Date), New ObjectParameter("Beginning_Date", GetType(Date)))

        Dim ending_DateParameter As ObjectParameter = If(ending_Date.HasValue, New ObjectParameter("Ending_Date", ending_Date), New ObjectParameter("Ending_Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Sales_by_Year_Result)("Sales_by_Year", beginning_DateParameter, ending_DateParameter)
    End Function

    Public Overridable Function SalesByCategory(categoryName As String, ordYear As String) As ObjectResult(Of SalesByCategory_Result)
        Dim categoryNameParameter As ObjectParameter = If(categoryName IsNot Nothing, New ObjectParameter("CategoryName", categoryName), New ObjectParameter("CategoryName", GetType(String)))

        Dim ordYearParameter As ObjectParameter = If(ordYear IsNot Nothing, New ObjectParameter("OrdYear", ordYear), New ObjectParameter("OrdYear", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SalesByCategory_Result)("SalesByCategory", categoryNameParameter, ordYearParameter)
    End Function

    Public Overridable Function sp_checkerror() As ObjectResult(Of Nullable(Of Integer))
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("sp_checkerror")
    End Function

    Public Overridable Function sp_getavgsal_empcount(did As Nullable(Of Integer), avgsal As ObjectParameter) As Integer
        Dim didParameter As ObjectParameter = If(did.HasValue, New ObjectParameter("did", did), New ObjectParameter("did", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_getavgsal_empcount", didParameter, avgsal)
    End Function

    Public Overridable Function Ten_Most_Expensive_Products() As ObjectResult(Of Ten_Most_Expensive_Products_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Ten_Most_Expensive_Products_Result)("Ten_Most_Expensive_Products")
    End Function

End Class
